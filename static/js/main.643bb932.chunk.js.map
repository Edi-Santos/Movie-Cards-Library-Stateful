{"version":3,"sources":["components/Header.jsx","components/myComponents/inputSearchBar/InputText.jsx","components/myComponents/inputSearchBar/InputCheckBox.jsx","components/myComponents/inputSearchBar/InputSelect.jsx","components/SearchBar.jsx","components/myComponents/inputAddMovie/InputText.jsx","components/myComponents/inputAddMovie/InputTextSubtitle.jsx","components/myComponents/inputAddMovie/InputTextImage.jsx","components/myComponents/inputAddMovie/InputTextAreaSin.jsx","components/myComponents/inputAddMovie/InputNumberRat.jsx","components/myComponents/inputAddMovie/InputSelectGen.jsx","components/myComponents/inputAddMovie/InputButton.jsx","components/AddMovie.jsx","components/Rating.jsx","components/MovieCard.jsx","components/MovieList.jsx","components/MovieLibrary.jsx","data.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","InputText","this","props","value","onChange","htmlFor","data-testid","type","name","id","InputCheckBox","checked","InputSelect","SearchBar","searchText","onSearchTextChange","bookmarkedOnly","onBookmarkedChange","selectedGenre","onSelectedGenreChange","InputTextSubtitle","InputTextImage","InputTextAreaSin","cols","rows","InputNumberRat","InputSelectGen","InputButton","onClick","initialState","subtitle","title","imagePath","storyline","rating","genre","AddMovie","state","handleChange","bind","submitChanges","target","setState","Rating","defaultProps","MovieCard","movie","alt","src","MovieList","movies","map","key","MovieLibrary","handleChanges","stateFromAddMovie","stateOfAddMovie","bookmarked","filter","filtCheck","includes","filtGen","filtText","toLowerCase","toLocaleLowerCase","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.643bb932.chunk.js","sourcesContent":["import React from 'react';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"movie-card-header\">\n        <h1 className=\"page-title\">Movie Cards Library</h1>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass InputText extends React.Component {\n  render() {\n    const { value, onChange } = this.props;\n\n    return (\n      <label htmlFor=\"search-text\" data-testid=\"text-input-label\">\n        Inclui o texto:\n        <input\n          type=\"text\"\n          name=\"searchText\"\n          value={ value }\n          onChange={ onChange }\n          id=\"search-text\"\n          data-testid=\"text-input\"\n        />\n      </label>\n    );\n  }\n}\n\nInputText.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default InputText;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass InputCheckBox extends React.Component {\n  render() {\n    const { checked, onChange } = this.props;\n\n    return (\n      <label htmlFor=\"search-checkbox\" data-testid=\"checkbox-input-label\">\n        Mostrar somente favoritos\n        <input\n          type=\"checkbox\"\n          name=\"bookmarkedOnly\"\n          checked={ checked }\n          onChange={ onChange }\n          id=\"search-checkbox\"\n          data-testid=\"checkbox-input\"\n        />\n      </label>\n    );\n  }\n}\n\nInputCheckBox.propTypes = {\n  checked: PropTypes.bool.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default InputCheckBox;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass InputSelect extends React.Component {\n  render() {\n    const { value, onChange } = this.props;\n\n    return (\n      <label htmlFor=\"filter-select\" data-testid=\"select-input-label\">\n        Filtrar por gênero\n        <select\n          name=\"selectedGenre\"\n          value={ value }\n          onChange={ onChange }\n          id=\"filter-select\"\n          data-testid=\"select-input\"\n        >\n          <option value=\"\" data-testid=\"select-option\">Todos</option>\n          <option value=\"action\" data-testid=\"select-option\">Ação</option>\n          <option value=\"comedy\" data-testid=\"select-option\">Comédia</option>\n          <option value=\"thriller\" data-testid=\"select-option\">Suspense</option>\n        </select>\n      </label>\n    );\n  }\n}\n\nInputSelect.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default InputSelect;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport InputText from './myComponents/inputSearchBar/InputText';\nimport InputCheckBox from './myComponents/inputSearchBar/InputCheckBox';\nimport InputSelect from './myComponents/inputSearchBar/InputSelect';\n\nclass SearchBar extends React.Component {\n  render() {\n    const {\n      searchText,\n      onSearchTextChange,\n      bookmarkedOnly,\n      onBookmarkedChange,\n      selectedGenre,\n      onSelectedGenreChange,\n    } = this.props;\n\n    return (\n      <form data-testid=\"search-bar-form\">\n        <InputText value={ searchText } onChange={ onSearchTextChange } />\n        <InputCheckBox checked={ bookmarkedOnly } onChange={ onBookmarkedChange } />\n        <InputSelect value={ selectedGenre } onChange={ onSelectedGenreChange } />\n      </form>\n    );\n  }\n}\n\nSearchBar.propTypes = {\n  searchText: PropTypes.string.isRequired,\n  onSearchTextChange: PropTypes.func.isRequired,\n  bookmarkedOnly: PropTypes.bool.isRequired,\n  onBookmarkedChange: PropTypes.func.isRequired,\n  selectedGenre: PropTypes.string.isRequired,\n  onSelectedGenreChange: PropTypes.func.isRequired,\n};\n\nexport default SearchBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass InputText extends React.Component {\n  render() {\n    const { value, onChange } = this.props;\n\n    return (\n      <label htmlFor=\"input-text\" data-testid=\"title-input-label\">\n        Título\n        <input\n          type=\"text\"\n          name=\"title\"\n          value={ value }\n          onChange={ onChange }\n          id=\"input-text\"\n          data-testid=\"title-input\"\n        />\n      </label>\n    );\n  }\n}\n\nInputText.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default InputText;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass InputTextSubtitle extends React.Component {\n  render() {\n    const { value, onChange } = this.props;\n\n    return (\n      <label htmlFor=\"input-text-sub\" data-testid=\"subtitle-input-label\">\n        Subtítulo\n        <input\n          type=\"text\"\n          name=\"subtitle\"\n          value={ value }\n          onChange={ onChange }\n          id=\"input-text-sub\"\n          data-testid=\"subtitle-input\"\n        />\n      </label>\n    );\n  }\n}\n\nInputTextSubtitle.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default InputTextSubtitle;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass InputTextImage extends React.Component {\n  render() {\n    const { value, onChange } = this.props;\n\n    return (\n      <label htmlFor=\"input-text-img\" data-testid=\"image-input-label\">\n        Imagem\n        <input\n          type=\"text\"\n          name=\"imagePath\"\n          value={ value }\n          onChange={ onChange }\n          id=\"input-text-img\"\n          data-testid=\"image-input\"\n        />\n      </label>\n    );\n  }\n}\n\nInputTextImage.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default InputTextImage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass InputTextAreaSin extends React.Component {\n  render() {\n    const { value, onChange } = this.props;\n    return (\n      <label htmlFor=\"input-textArea-sin\" data-testid=\"storyline-input-label\">\n        Sinopse\n        <textarea\n          name=\"storyline\"\n          id=\"input-textArea-sin\"\n          value={ value }\n          onChange={ onChange }\n          cols=\"30\"\n          rows=\"10\"\n          data-testid=\"storyline-input\"\n        />\n      </label>\n    );\n  }\n}\n\nInputTextAreaSin.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default InputTextAreaSin;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass InputNumberRat extends React.Component {\n  render() {\n    const { value, onChange } = this.props;\n\n    return (\n      <label htmlFor=\"input-num-rat\" data-testid=\"rating-input-label\">\n        Avaliação\n        <input\n          type=\"number\"\n          name=\"rating\"\n          value={ value }\n          onChange={ onChange }\n          id=\"input-num-rat\"\n          data-testid=\"rating-input\"\n        />\n      </label>\n    );\n  }\n}\n\nInputNumberRat.propTypes = {\n  value: PropTypes.number.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default InputNumberRat;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass InputSelectGen extends React.Component {\n  render() {\n    const { value, onChange } = this.props;\n    return (\n      <label htmlFor=\"input-select-gen\" data-testid=\"genre-input-label\">\n        Gênero\n        <select\n          name=\"genre\"\n          id=\"input-select-gen\"\n          value={ value }\n          onChange={ onChange }\n          data-testid=\"genre-input\"\n        >\n          <option value=\"action\" data-testid=\"genre-option\">Ação</option>\n          <option value=\"comedy\" data-testid=\"genre-option\">Comédia</option>\n          <option value=\"thriller\" data-testid=\"genre-option\">Suspense</option>\n        </select>\n      </label>\n    );\n  }\n}\n\nInputSelectGen.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default InputSelectGen;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass InputButton extends React.Component {\n  render() {\n    const { onClick } = this.props;\n\n    return (\n      <button type=\"submit\" onClick={ onClick } data-testid=\"send-button\">\n        Adicionar filme\n      </button>\n    );\n  }\n}\n\nInputButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default InputButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport InputText from './myComponents/inputAddMovie/InputText';\nimport InputTextSubtitle from './myComponents/inputAddMovie/InputTextSubtitle';\nimport InputTextImage from './myComponents/inputAddMovie/InputTextImage';\nimport InputTextAreaSin from './myComponents/inputAddMovie/InputTextAreaSin';\nimport InputNumberRat from './myComponents/inputAddMovie/InputNumberRat';\nimport InputSelectGen from './myComponents/inputAddMovie/InputSelectGen';\nimport InputButton from './myComponents/inputAddMovie/InputButton';\n\nconst initialState = {\n  subtitle: '',\n  title: '',\n  imagePath: '',\n  storyline: '',\n  rating: 0,\n  genre: 'action',\n};\n\nclass AddMovie extends React.Component {\n  constructor() {\n    super();\n\n    this.state = initialState;\n\n    this.handleChange = this.handleChange.bind(this);\n    this.submitChanges = this.submitChanges.bind(this);\n  }\n\n  handleChange({ target }) {\n    const { name } = target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  submitChanges() {\n    const { onClick } = this.props;\n    onClick(this.state);\n    this.setState(initialState);\n  }\n\n  render() {\n    const { title, subtitle, imagePath, storyline, rating, genre } = this.state;\n\n    return (\n      <form data-testid=\"add-movie-form\">\n        <InputText value={ title } onChange={ this.handleChange } />\n        <InputTextSubtitle value={ subtitle } onChange={ this.handleChange } />\n        <InputTextImage value={ imagePath } onChange={ this.handleChange } />\n        <InputTextAreaSin value={ storyline } onChange={ this.handleChange } />\n        <InputNumberRat value={ rating } onChange={ this.handleChange } />\n        <InputSelectGen value={ genre } onChange={ this.handleChange } />\n        <InputButton onClick={ this.submitChanges } />\n      </form>\n    );\n  }\n}\n\nAddMovie.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default AddMovie;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Rating extends React.Component {\n  render() {\n    const { rating } = this.props;\n    return (\n      <div className=\"movie-card-rating\" data-testid=\"rating\">\n        <span className=\"rating\">{rating}</span>\n      </div>\n    );\n  }\n}\n\nRating.propTypes = { rating: PropTypes.number };\n\nRating.defaultProps = {\n  rating: 'undefined',\n};\n\nexport default Rating;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Rating from './Rating';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { title, subtitle, storyline, rating, imagePath } = movie;\n    return (\n      <div className=\"movie-card\" data-testid=\"movie-card\">\n        <img alt=\"Movie Cover\" className=\"movie-card-image\" src={ imagePath } />\n        <div className=\"movie-card-body\">\n          <h4 data-testid=\"movie-card-title\" className=\"movie-card-title\">{title}</h4>\n          <h5 className=\"movie-card-subtitle\">{subtitle}</h5>\n          <p className=\"movie-card-storyline\">{storyline}</p>\n        </div>\n        <Rating rating={ rating } />\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    rating: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    imagePath: PropTypes.string,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport MovieCard from './MovieCard';\n\nclass MovieList extends React.Component {\n  render() {\n    const { movies/* , searchByText, checkBox, genreSelected */ } = this.props;\n\n    return (\n      <div data-testid=\"movie-list\" className=\"movie-list\">\n        { movies\n          .map((movie) => <MovieCard key={ movie.title } movie={ movie } />) }\n      </div>\n    );\n  }\n}\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.object,\n  ).isRequired, /*\n  searchByText: PropTypes.string.isRequired,\n  checkBox: PropTypes.bool.isRequired,\n  genreSelected: PropTypes.string.isRequired, */\n};\n\nexport default MovieList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport SearchBar from './SearchBar';\nimport AddMovie from './AddMovie';\nimport MovieList from './MovieList';\n\nclass MovieLibrary extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchText: '',\n      bookmarkedOnly: false,\n      selectedGenre: '',\n      movies: props.movies,\n    };\n\n    this.handleChanges = this.handleChanges.bind(this);\n    this.stateFromAddMovie = this.stateFromAddMovie.bind(this);\n  }\n\n  handleChanges({ target }) {\n    const { name } = target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n\n    this.setState({\n      [name]: value,\n    }, () => {});\n  }\n\n  stateFromAddMovie(state) {\n    const { movies } = this.props;\n\n    const stateOfAddMovie = {\n      subtitle: state.subtitle,\n      title: state.title,\n      storyline: state.storyline,\n      rating: state.rating,\n      imagePath: state.imagePath,\n      bookmarked: state.bookmarked,\n      genre: state.genre,\n    };\n    this.setState({ movies: [...movies, stateOfAddMovie] });\n  }\n\n  render() {\n    const { searchText, bookmarkedOnly, selectedGenre, movies } = this.state;\n    return (\n      <div>\n        <SearchBar\n          searchText={ searchText }\n          bookmarkedOnly={ bookmarkedOnly }\n          selectedGenre={ selectedGenre }\n          onSearchTextChange={ this.handleChanges }\n          onBookmarkedChange={ this.handleChanges }\n          onSelectedGenreChange={ this.handleChanges }\n        />\n        <MovieList\n          movies={ movies\n            .filter((filtCheck) => (\n              bookmarkedOnly\n                ? filtCheck.bookmarked === bookmarkedOnly\n                : filtCheck.genre.includes(selectedGenre)\n            ))\n            .filter((filtGen) => filtGen.genre.includes(selectedGenre))\n            .filter((filtText) => (\n              filtText.title.toLowerCase().includes(searchText.toLocaleLowerCase())\n              || filtText.subtitle.toLowerCase().includes(searchText.toLocaleLowerCase())\n              || filtText.storyline.toLowerCase()\n                .includes(searchText.toLocaleLowerCase()))) }\n        />\n        <AddMovie onClick={ this.stateFromAddMovie } />\n      </div>\n    );\n  }\n}\n\nMovieLibrary.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.object,\n  ).isRequired,\n};\n\nexport default MovieLibrary;\n","const movies = [\n  {\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import React from 'react';\nimport Header from './components/Header';\nimport MovieLibrary from './components/MovieLibrary';\nimport './App.css';\n\nimport movies from './data';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MovieLibrary movies={ movies } />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}